#include <iostream>
#include "layer_common.hpp"

int main(int argc, char** argv) {
  {
    std::cout << "--------------Test Conv2d start------------" << std::endl;
    Conv2d<double> test(3, 3, 3, 2, 1);
    auto input = xt::linspace<double>(-0.1, 0.5, 96).reshape({2, 3, 4, 4});
    auto weight = xt::linspace<double>(-0.2, 0.3, 81).reshape({3, 3, 3, 3});
    auto bias = xt::linspace<double>(-0.1, 0.2, 3);
    test.set_weight(weight);
    test.set_bias(bias);
    auto out = test.forward(input);
    //  Correct out:
    //  [[[[-0.07446053 -0.08099342]
    //   [-0.13984868 -0.19432237]]
    //
    //  [[ 0.10964474  0.14894079]
    //   [ 0.17641447  0.24823684]]
    //
    //  [[ 0.29375     0.378875  ]
    //   [ 0.49267763  0.69079605]]]
    //
    //
    // [[[-0.46098684 -0.67783553]
    //   [-0.77079605 -1.16632237]]
    //
    //  [[ 0.33701316  0.47294079]
    //   [ 0.46630921  0.6575    ]]
    //
    //  [[ 1.13501316  1.62371711]
    //   [ 1.70341447  2.48132237]]]]
    std::cout << out << std::endl;

    std::cout << "--------------------------" << std::endl;

    auto dinput = test.backward(out);
    //  Correct dinput:
    //  [[[[0.06007969 0.13415304 0.07481016 0.0776028 ]
    //   [0.15975493 0.37160551 0.21393405 0.22138113]
    //   [0.10343104 0.24679367 0.14470929 0.14936373]
    //   [0.11335436 0.2706803  0.15867262 0.16332706]]
    //
    //  [[0.07858224 0.17778935 0.09994391 0.10273655]
    //   [0.20802743 0.48690173 0.28095777 0.28840485]
    //   [0.13320099 0.31845358 0.18659926 0.1912537 ]
    //   [0.1431243  0.34234021 0.20056258 0.20521702]]
    //
    //  [[0.09708479 0.22142566 0.12507767 0.12787031]
    //   [0.25629992 0.60219794 0.3479815  0.35542858]
    //   [0.16297093 0.39011349 0.22848923 0.23314367]
    //   [0.17289424 0.41400012 0.24245255 0.24710699]]]
    //
    //
    // [[[0.263006   0.63997673 0.37951937 0.38838701]
    //   [0.66451283 1.63072919 0.97234984 0.9935456 ]
    //   [0.40877973 1.00840683 0.60321192 0.61554005]
    //   [0.43500962 1.07162109 0.6401963  0.65252442]]
    //
    //  [[0.31987697 0.77665646 0.45932813 0.46819576]
    //   [0.80007348 1.95705173 1.16311172 1.18430748]
    //   [0.48746941 1.19804963 0.71416505 0.72649317]
    //   [0.5136993  1.2612639  0.75114942 0.76347755]]
    //
    //  [[0.37674794 0.91333618 0.53913688 0.54800452]
    //   [0.93563413 2.28337426 1.3538736  1.37506937]
    //   [0.56615909 1.38769243 0.82511817 0.8374463 ]
    //   [0.59238898 1.4509067  0.86210255 0.87443067]]]]
    std::cout << dinput << std::endl;
    std::cout << "--------------Test Conv2d done------------" << std::endl;
  }
  {
    std::cout << "--------------Test Linear start------------" << std::endl;
    Linear<double> test(120, 3);
    auto input = xt::linspace<double>(-0.1, 0.5, 240).reshape({2, 4, 5, 6});
    auto weight = xt::linspace<double>(-0.2, 0.3, 360).reshape({120, 3});
    auto bias = xt::linspace<double>(-0.3, 0.1, 3);
    test.set_weight(weight);
    test.set_bias(bias);
    auto out = test.forward(input);
    //  Correct out:
    //  [[1.49834967 1.70660132 1.91485297]
    //   [3.25553199 3.5141327  3.77273342]]
    std::cout << out << std::endl;

    std::cout << "--------------------------" << std::endl;

    auto dinput = test.backward(out);
    //  Correct dinput:
    //[[[[-1.01625006 -0.99485812 -0.97346618 -0.95207424 -0.9306823
    //    -0.90929037]
    //   [-0.88789843 -0.86650649 -0.84511455 -0.82372261 -0.80233067
    //    -0.78093873]
    //   [-0.7595468  -0.73815486 -0.71676292 -0.69537098 -0.67397904
    //    -0.6525871 ]
    //   [-0.63119516 -0.60980323 -0.58841129 -0.56701935 -0.54562741
    //    -0.52423547]
    //   [-0.50284353 -0.48145159 -0.46005966 -0.43866772 -0.41727578
    //    -0.39588384]]
    //
    //  [[-0.3744919  -0.35309996 -0.33170802 -0.31031609 -0.28892415
    //    -0.26753221]
    //   [-0.24614027 -0.22474833 -0.20335639 -0.18196445 -0.16057252
    //    -0.13918058]
    //   [-0.11778864 -0.0963967  -0.07500476 -0.05361282 -0.03222088
    //    -0.01082895]
    //   [ 0.01056299  0.03195493  0.05334687  0.07473881  0.09613075
    //     0.11752269]
    //   [ 0.13891462  0.16030656  0.1816985   0.20309044  0.22448238
    //     0.24587432]]
    //
    //  [[ 0.26726626  0.28865819  0.31005013  0.33144207  0.35283401
    //     0.37422595]
    //   [ 0.39561789  0.41700983  0.43840176  0.4597937   0.48118564
    //     0.50257758]
    //   [ 0.52396952  0.54536146  0.5667534   0.58814533  0.60953727
    //     0.63092921]
    //   [ 0.65232115  0.67371309  0.69510503  0.71649697  0.7378889
    //     0.75928084]
    //   [ 0.78067278  0.80206472  0.82345666  0.8448486   0.86624054
    //     0.88763247]]
    //
    //  [[ 0.90902441  0.93041635  0.95180829  0.97320023  0.99459217
    //     1.01598411]
    //   [ 1.03737604  1.05876798  1.08015992  1.10155186  1.1229438
    //     1.14433574]
    //   [ 1.16572768  1.18711961  1.20851155  1.22990349  1.25129543
    //     1.27268737]
    //   [ 1.29407931  1.31547125  1.33686318  1.35825512  1.37964706
    //     1.401039  ]
    //   [ 1.42243094  1.44382288  1.46521482  1.48660675  1.50799869
    //     1.52939063]]]
    //
    //
    // [[[-2.09307628 -2.04902726 -2.00497825 -1.96092923 -1.91688021
    //    -1.87283119]
    //   [-1.82878218 -1.78473316 -1.74068414 -1.69663513 -1.65258611
    //    -1.60853709]
    //   [-1.56448807 -1.52043906 -1.47639004 -1.43234102 -1.388292
    //    -1.34424299]
    //   [-1.30019397 -1.25614495 -1.21209594 -1.16804692 -1.1239979
    //    -1.07994888]
    //   [-1.03589987 -0.99185085 -0.94780183 -0.90375282 -0.8597038
    //    -0.81565478]]
    //
    //  [[-0.77160576 -0.72755675 -0.68350773 -0.63945871 -0.5954097
    //    -0.55136068]
    //   [-0.50731166 -0.46326264 -0.41921363 -0.37516461 -0.33111559
    //    -0.28706658]
    //   [-0.24301756 -0.19896854 -0.15491952 -0.11087051 -0.06682149
    //    -0.02277247]
    //   [ 0.02127654  0.06532556  0.10937458  0.1534236   0.19747261
    //     0.24152163]
    //   [ 0.28557065  0.32961966  0.37366868  0.4177177   0.46176672
    //     0.50581573]]
    //
    //  [[ 0.54986475  0.59391377  0.63796278  0.6820118   0.72606082
    //     0.77010984]
    //   [ 0.81415885  0.85820787  0.90225689  0.9463059   0.99035492
    //     1.03440394]
    //   [ 1.07845296  1.12250197  1.16655099  1.21060001  1.25464902
    //     1.29869804]
    //   [ 1.34274706  1.38679608  1.43084509  1.47489411  1.51894313
    //     1.56299214]
    //   [ 1.60704116  1.65109018  1.6951392   1.73918821  1.78323723
    //     1.82728625]]
    //
    //  [[ 1.87133527  1.91538428  1.9594333   2.00348232  2.04753133
    //     2.09158035]
    //   [ 2.13562937  2.17967839  2.2237274   2.26777642  2.31182544
    //     2.35587445]
    //   [ 2.39992347  2.44397249  2.48802151  2.53207052  2.57611954
    //     2.62016856]
    //   [ 2.66421757  2.70826659  2.75231561  2.79636463  2.84041364
    //     2.88446266]
    //   [ 2.92851168  2.97256069  3.01660971  3.06065873  3.10470775
    //     3.14875676]]]]
    std::cout << dinput << std::endl;
    std::cout << "--------------Test Linear done------------" << std::endl;
  }
  {
    std::cout << "------------Test MaxPool2d start------------" << std::endl;
    MaxPool2d<double> test(2, 2);
    auto input = xt::linspace<double>(-0.1, 0.5, 240).reshape({2, 4, 5, 6});
    auto out = test.forward(input);
    //  Correct out:
    //[[[[-0.08242678 -0.07740586 -0.07238494]
    //   [-0.05230126 -0.04728033 -0.04225941]]
    //
    //  [[-0.00711297 -0.00209205  0.00292887]
    //   [ 0.02301255  0.02803347  0.03305439]]
    //
    //  [[ 0.06820084  0.07322176  0.07824268]
    //   [ 0.09832636  0.10334728  0.1083682 ]]
    //
    //  [[ 0.14351464  0.14853556  0.15355649]
    //   [ 0.17364017  0.17866109  0.18368201]]]
    //
    //
    // [[[ 0.21882845  0.22384937  0.22887029]
    //   [ 0.24895397  0.2539749   0.25899582]]
    //
    //  [[ 0.29414226  0.29916318  0.3041841 ]
    //   [ 0.32426778  0.3292887   0.33430962]]
    //
    //  [[ 0.36945607  0.37447699  0.37949791]
    //   [ 0.39958159  0.40460251  0.40962343]]
    //
    //  [[ 0.44476987  0.44979079  0.45481172]
    //   [ 0.4748954   0.47991632  0.48493724]]]]

    std::cout << out << std::endl;

    std::cout << "--------------------------" << std::endl;

    auto dinput = test.backward(out);
    //  Correct dinput:
    //[[[[ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.         -0.08242678  0.         -0.07740586  0.
    //    -0.07238494]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.         -0.05230126  0.         -0.04728033  0.
    //    -0.04225941]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]]
    //
    //  [[ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.         -0.00711297  0.         -0.00209205  0.
    //     0.00292887]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.02301255  0.          0.02803347  0.
    //     0.03305439]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]]
    //
    //  [[ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.06820084  0.          0.07322176  0.
    //     0.07824268]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.09832636  0.          0.10334728  0.
    //     0.1083682 ]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]]
    //
    //  [[ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.14351464  0.          0.14853556  0.
    //     0.15355649]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.17364017  0.          0.17866109  0.
    //     0.18368201]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]]]
    //
    //
    // [[[ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.21882845  0.          0.22384937  0.
    //     0.22887029]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.24895397  0.          0.2539749   0.
    //     0.25899582]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]]
    //
    //  [[ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.29414226  0.          0.29916318  0.
    //     0.3041841 ]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.32426778  0.          0.3292887   0.
    //     0.33430962]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]]
    //
    //  [[ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.36945607  0.          0.37447699  0.
    //     0.37949791]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.39958159  0.          0.40460251  0.
    //     0.40962343]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]]
    //
    //  [[ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.44476987  0.          0.44979079  0.
    //     0.45481172]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.4748954   0.          0.47991632  0.
    //     0.48493724]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]]]]

    std::cout << dinput << std::endl;
    std::cout << "------------Test MaxPool2d done------------" << std::endl;
  }
  return 0;
}