#include <iostream>
#include "activation.hpp"
#include "convolution.hpp"
#include "linear.hpp"
#include "pooling.hpp"

int main(int argc, char** argv) {
  {
    std::cout << "--------------Test Conv2d start------------" << std::endl;
    Conv2d<double> test(3, 3, 3, 2, 1);
    auto input = xt::linspace<double>(-0.1, 0.5, 96).reshape({2, 3, 4, 4});
    auto weight = xt::linspace<double>(-0.2, 0.3, 81).reshape({3, 3, 3, 3});
    auto bias = xt::linspace<double>(-0.1, 0.2, 3);
    test.set_weight(weight);
    test.set_bias(bias);
    auto out = test.forward(input);
    //  Correct out:
    //  [[[[-0.07446053 -0.08099342]
    //   [-0.13984868 -0.19432237]]
    //
    //  [[ 0.10964474  0.14894079]
    //   [ 0.17641447  0.24823684]]
    //
    //  [[ 0.29375     0.378875  ]
    //   [ 0.49267763  0.69079605]]]
    //
    //
    // [[[-0.46098684 -0.67783553]
    //   [-0.77079605 -1.16632237]]
    //
    //  [[ 0.33701316  0.47294079]
    //   [ 0.46630921  0.6575    ]]
    //
    //  [[ 1.13501316  1.62371711]
    //   [ 1.70341447  2.48132237]]]]
    std::cout << out << std::endl;

    std::cout << "--------------------------" << std::endl;

    auto dinput = test.backward(out);
    //  Correct dinput:
    //  [[[[0.06007969 0.13415304 0.07481016 0.0776028 ]
    //   [0.15975493 0.37160551 0.21393405 0.22138113]
    //   [0.10343104 0.24679367 0.14470929 0.14936373]
    //   [0.11335436 0.2706803  0.15867262 0.16332706]]
    //
    //  [[0.07858224 0.17778935 0.09994391 0.10273655]
    //   [0.20802743 0.48690173 0.28095777 0.28840485]
    //   [0.13320099 0.31845358 0.18659926 0.1912537 ]
    //   [0.1431243  0.34234021 0.20056258 0.20521702]]
    //
    //  [[0.09708479 0.22142566 0.12507767 0.12787031]
    //   [0.25629992 0.60219794 0.3479815  0.35542858]
    //   [0.16297093 0.39011349 0.22848923 0.23314367]
    //   [0.17289424 0.41400012 0.24245255 0.24710699]]]
    //
    //
    // [[[0.263006   0.63997673 0.37951937 0.38838701]
    //   [0.66451283 1.63072919 0.97234984 0.9935456 ]
    //   [0.40877973 1.00840683 0.60321192 0.61554005]
    //   [0.43500962 1.07162109 0.6401963  0.65252442]]
    //
    //  [[0.31987697 0.77665646 0.45932813 0.46819576]
    //   [0.80007348 1.95705173 1.16311172 1.18430748]
    //   [0.48746941 1.19804963 0.71416505 0.72649317]
    //   [0.5136993  1.2612639  0.75114942 0.76347755]]
    //
    //  [[0.37674794 0.91333618 0.53913688 0.54800452]
    //   [0.93563413 2.28337426 1.3538736  1.37506937]
    //   [0.56615909 1.38769243 0.82511817 0.8374463 ]
    //   [0.59238898 1.4509067  0.86210255 0.87443067]]]]
    std::cout << dinput << std::endl;
    std::cout << "--------------Test Conv2d done------------" << std::endl;
  }
  {
    std::cout << "--------------Test Linear start------------" << std::endl;
    Linear<double> test(120, 3);
    auto input = xt::linspace<double>(-0.1, 0.5, 240).reshape({2, 4, 5, 6});
    auto weight = xt::linspace<double>(-0.2, 0.3, 360).reshape({3, 120});
    auto bias = xt::linspace<double>(-0.3, 0.1, 3);
    test.set_weight(weight);
    test.set_bias(bias);
    auto out = test.forward(input);

    std::cout << out << std::endl;

    std::cout << "--------------------------" << std::endl;

    auto dinput = test.backward(out);

    std::cout << dinput << std::endl;
    std::cout << "--------------Test Linear done------------" << std::endl;
  }
  {
    std::cout << "------------Test MaxPool2d start------------" << std::endl;
    MaxPool2d<double> test(2, 2);
    auto input = xt::linspace<double>(-0.1, 0.5, 240).reshape({2, 4, 5, 6});
    auto out = test.forward(input);
    //  Correct out:
    //[[[[-0.08242678 -0.07740586 -0.07238494]
    //   [-0.05230126 -0.04728033 -0.04225941]]
    //
    //  [[-0.00711297 -0.00209205  0.00292887]
    //   [ 0.02301255  0.02803347  0.03305439]]
    //
    //  [[ 0.06820084  0.07322176  0.07824268]
    //   [ 0.09832636  0.10334728  0.1083682 ]]
    //
    //  [[ 0.14351464  0.14853556  0.15355649]
    //   [ 0.17364017  0.17866109  0.18368201]]]
    //
    //
    // [[[ 0.21882845  0.22384937  0.22887029]
    //   [ 0.24895397  0.2539749   0.25899582]]
    //
    //  [[ 0.29414226  0.29916318  0.3041841 ]
    //   [ 0.32426778  0.3292887   0.33430962]]
    //
    //  [[ 0.36945607  0.37447699  0.37949791]
    //   [ 0.39958159  0.40460251  0.40962343]]
    //
    //  [[ 0.44476987  0.44979079  0.45481172]
    //   [ 0.4748954   0.47991632  0.48493724]]]]

    std::cout << out << std::endl;

    std::cout << "--------------------------" << std::endl;

    auto dinput = test.backward(out);
    //  Correct dinput:
    //[[[[ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.         -0.08242678  0.         -0.07740586  0.
    //    -0.07238494]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.         -0.05230126  0.         -0.04728033  0.
    //    -0.04225941]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]]
    //
    //  [[ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.         -0.00711297  0.         -0.00209205  0.
    //     0.00292887]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.02301255  0.          0.02803347  0.
    //     0.03305439]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]]
    //
    //  [[ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.06820084  0.          0.07322176  0.
    //     0.07824268]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.09832636  0.          0.10334728  0.
    //     0.1083682 ]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]]
    //
    //  [[ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.14351464  0.          0.14853556  0.
    //     0.15355649]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.17364017  0.          0.17866109  0.
    //     0.18368201]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]]]
    //
    //
    // [[[ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.21882845  0.          0.22384937  0.
    //     0.22887029]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.24895397  0.          0.2539749   0.
    //     0.25899582]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]]
    //
    //  [[ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.29414226  0.          0.29916318  0.
    //     0.3041841 ]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.32426778  0.          0.3292887   0.
    //     0.33430962]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]]
    //
    //  [[ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.36945607  0.          0.37447699  0.
    //     0.37949791]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.39958159  0.          0.40460251  0.
    //     0.40962343]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]]
    //
    //  [[ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.44476987  0.          0.44979079  0.
    //     0.45481172]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]
    //   [ 0.          0.4748954   0.          0.47991632  0.
    //     0.48493724]
    //   [ 0.          0.          0.          0.          0.
    //     0.        ]]]]

    std::cout << dinput << std::endl;
    std::cout << "------------Test MaxPool2d done------------" << std::endl;
  }
  {
    std::cout << "--------------Test ReLU start--------------" << std::endl;
    ReLU<double> test;
    auto input = xt::linspace<double>(-0.1, 0.5, 240).reshape({2, 4, 5, 6});
    auto out = test.forward(input);

    std::cout << out << std::endl;

    std::cout << "--------------------------" << std::endl;

    auto dinput = test.backward(out);
    std::cout << dinput << std::endl;
    std::cout << "--------------Test ReLU done--------------" << std::endl;
  }

  return 0;
}